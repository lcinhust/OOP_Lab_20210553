1. If you create a constructor method to build a DVD by title then create a constructor method to build a DVD by category. Does JAVA allow you to do this?
Answer: 
Once we perform this action, Java will display a notification indicating that the method (constructor) 
has been duplicated, which means that Java has marked it as an error and will prevent the run of program later. 
However, the scenario is slightly different when attempting to test these constructors via the Aims.java file. 
Despite receiving a warning window stating there were errors in the AimsProject, an option to proceed with the 
launch was still provided. Upon launching, the "title" attribute was filled while the category was set to null, 
due to the title constructor taking precedence over the category constructor.

2. Why getter and setter methods are evil?
Answer:
Getter and setter methods are not inherently evil, but they can be misused or overused in object-oriented programming, 
which can lead to negative consequences such as decreased readability, maintainability, and performance.

One potential issue with using getter and setter methods excessively is that they can violate the principle of 
encapsulation, which is a fundamental concept in object-oriented programming. Encapsulation refers to the idea that an 
object's internal state should be hidden from other objects and should only be accessible through a well-defined 
interface. Getter and setter methods can expose an object's internal state to other objects, which can lead to 
unintended consequences if the internal state is modified in unexpected ways.

Another issue with getter and setter methods is that they can make code more verbose and harder to read. Instead of 
simply accessing a property directly, developers must use a method call, which can make the code more difficult to 
understand and maintain.

Furthermore, using getter and setter methods can have a negative impact on performance, especially in languages that
 do not optimize method calls. Each method call adds some overhead, and using getter and setter methods excessively 
 can lead to a significant performance penalty.

In summary, getter and setter methods can be a useful tool in object-oriented programming, but they should be used j
udiciously and in accordance with the principles of encapsulation, readability, and performance.
